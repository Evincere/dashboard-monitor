
# Informe final para la secci√≥n de reportes administrativos

## Contexto general del sistema

El sistema del **Ministerio P√∫blico de la Defensa (MPD)** para concursos p√∫blicos est√° compuesto por dos grandes proyectos:

1. **Backend oficial (`mpd_concursos`)**: implementado en **Spring¬†Boot** con una arquitectura hexagonal. Gestiona concursos, inscripciones, usuarios, roles, documentaci√≥n, notificaciones y paneles de control. Proporciona seguridad mediante JWT y roles (Administrador, Evaluador, Postulante, Auditor) y genera trazabilidad en todos los flujoshttps://github.com/Evincere/mpd_concursos/blob/e1440d1b20d501105038a37b5a115bddcc2dcf1f/README.md#L533-L539.  Dispone de endpoints para crear inscripcioneshttps://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/contest/infrastructure/controller/ContestInscriptionController.java#L16-L24, filtrar concursoshttps://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/filter/infrastructure/controller/ContestFilterController.java#L16-L42, cargar y descargar documentoshttps://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/document/infrastructure/controller/DocumentController.java#L48-L62https://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/document/infrastructure/controller/DocumentController.java#L268-L330, obtener estad√≠sticas de los usuarioshttps://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/dashboard/infrastructure/controller/UserDashboardController.java#L136-L157 y gestionar notificacioneshttps://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/notification/infrastructure/rest/controller/NotificationController.java#L30-L57.

2. **Microservicio `dashboard‚Äëmonitor`**: es un front‚Äëend construido con **Next.js** (App Router, TypeScript y Tailwind) que sirve de intermediario entre los usuarios y el backend.  Expone un conjunto de rutas API para autenticar, gestionar postulaciones, mostrar estad√≠sticas, manipular documentos, acceder a la base de datos, administrar usuarios, concursos, backups y flujos de validaci√≥nhttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/ESTRUCTURA_PROYECTO.md#L19-L30.  Las rutas `/api/documents` permiten descargar, visualizar, aprobar y rechazar documentoshttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/ENDPOINTS_AUDITORIA.md#L50-L54 y las de validaci√≥n permiten aprobar o rechazar postulacioneshttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/ENDPOINTS_AUDITORIA.md#L57-L61.  En el m√≥dulo dashboard existen m√©tricas estimadas (por ejemplo `Math.floor(totalEligible *¬†0.25)`) que deber√≠an reemplazarse por consultas SQL reales para obtener datos exactos.

El objetivo de la nueva secci√≥n es permitir a los administradores generar **reportes administrativos oficiales** a partir de los datos existentes (inscripciones, documentos, validaciones y auditor√≠a) y de un archivo CSV adjunto con 252 registros que contiene, entre otros, nombre completo, DNI, correo, localidad, circunscripci√≥n, pertenencia MPDyP/SCJ/MPF, estado de admisi√≥n y observaciones.

## Dise√±o de la nueva secci√≥n de reportes

### Fase¬†1 ‚Äì Exportaci√≥n r√°pida desde la vista de postulaciones

* **Bot√≥n ‚ÄúExportar resultados‚Äù**: en la p√°gina de postulaciones del dashboard se a√±adir√° un bot√≥n junto a los filtros existentes (estado de admisi√≥n, organismo, circunscripci√≥n, localidad, etc.).  Al hacer clic se abrir√° un modal donde se selecciona el **tipo de reporte** (PDF, Excel, CSV).  Los filtros aplicados se reutilizan para limitar los registros incluidos, de modo que no se duplique la l√≥gica de filtradohttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/PLAN_ACCION_ESTRUCTURADO.md#L183-L196.

* **Endpoint de generaci√≥n**: se crea `POST¬†/api/reports/generate`.  Este endpoint recibe como cuerpo el identificador del concurso, el tipo de reporte y los filtros.  Devuelve un identificador √∫nico (ID) del reporte.

* **Descarga**: luego de generar el reporte, se llamar√° a `GET¬†/api/reports/{id}/download` para obtener el archivo en el formato elegido.  La respuesta incluir√° cabeceras para permitir la descarga directa.

### Fase¬†2 ‚Äì Secci√≥n dedicada de reportes y auditor√≠a

* **Men√∫ lateral ‚Äúüìä¬†Reportes y auditor√≠a‚Äù**: se agrega una nueva secci√≥n en la interfaz.  En ella, los administradores podr√°n:
  * **Generar reportes especializados**: con par√°metros avanzados (rango de fechas, tipo de documento, validador, categor√≠a MPDyP/SCJ/MPF, circunscripci√≥n, etc.).
  * **Historial y control de versiones**: consultar el historial de reportes (`GET¬†/api/reports/history`), ver qui√©n los gener√≥, cu√°ndo, con qu√© filtros y descargar de nuevo versiones anteriores.
  * **Plantillas personalizadas**: listar plantillas almacenadas (`GET¬†/api/reports/templates`) y permitir su edici√≥n para personalizar encabezados y pies de p√°gina.

### Tipos de reportes propuestos

1. **Reporte oficial de resultados (PDF)**https://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/SISTEMA_REPORTES_PROPUESTO.md#L250-L280

   * **Cabecera institucional**: logo, nombre del MPD y datos de contacto.
   * **Datos del concurso**: t√≠tulo, per√≠odo de inscripci√≥n, per√≠odo de validaci√≥n y funcionario responsable.
   * **Resumen ejecutivo**: totales de postulaciones, n√∫mero de aprobadas, rechazadas y pendientes.  Utilizar el CSV para calcular cu√°ntos aspirantes est√°n en cada estado y desglosar por organismo (MPDyP/SCJ/MPF) y circunscripci√≥n.
   * **Listados**:  
     * **Aprobados**: DNI, nombre completo, correo, localidad y circunscripci√≥nhttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/SISTEMA_REPORTES_PROPUESTO.md#L256-L273.  
     * **Rechazados**: DNI, nombre completo, motivo de rechazo y observacioneshttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/SISTEMA_REPORTES_PROPUESTO.md#L274-L277.  
     * **Pendientes** (opcional): listado de quienes requieren correcci√≥n o revisi√≥n.
   * **Firma digital**: espacio para firma del administrador y, opcionalmente, incluir un c√≥digo QR para verificar la autenticidad del documento.

2. **Reporte de progreso de validaci√≥n (Excel/CSV)**

   Basado en la interfaz `ValidationProgressReport` sugerida en la documentaci√≥n del microservicio.  Debe incluir:

   * **Overview**: n√∫mero total de postulaciones, validadas, pendientes y en proceso.  
   * **Por validador**: cantidad de expedientes validados por cada operador y tiempo medio de validaci√≥n.  
   * **Por tipo de documento**: n√∫mero de documentos aprobados, rechazados y pendientes.  
   * **Timeline**: evoluci√≥n de las validaciones a lo largo del tiempo (por d√≠a o semana).  
   * **Contenido por postulante**: para cada registro del CSV: DNI, nombre completo, estado de admisi√≥n, n√∫mero total de documentos (`docs_total`), documentos aprobados y rechazados (`docs_aprobados`, `docs_rechazados`), porcentaje de completitud y fecha/hora de validaci√≥n m√°s reciente.

3. **Reporte de auditor√≠a (Excel o JSON)**https://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/SISTEMA_REPORTES_PROPUESTO.md#L111-L118

   * **Acciones de validaci√≥n**: qui√©n aprob√≥ o rechaz√≥ cada documento con fecha y hora.  
   * **Eventos de sistema**: cambios de estado de inscripciones, inicios de sesi√≥n, accesos a reportes y copias de seguridad.  Estas entradas se almacenar√°n en una nueva tabla `generated_reports` junto con metadatos (usuario, filtros, tama√±o del archivo)https://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/SISTEMA_REPORTES_PROPUESTO.md#L179-L196.  
   * **Cambios en documentos**: versiones, modificaciones y comprobaci√≥n de integridad.  
   * **Acciones de usuario**: creaci√≥n de concursos, asignaci√≥n de validadores y cualquier otra acci√≥n administrativa.

4. **Reporte demogr√°fico (opcional)**

   A partir de los campos **centro de vida**, **circunscripci√≥n**, **categor√≠a (MPDyP/SCJ/MPF)** y **estado de admisi√≥n** del CSV se pueden generar an√°lisis demogr√°ficos:

   * Distribuci√≥n de postulantes por circunscripci√≥n y centro de vida.  
   * Participaci√≥n de aspirantes por organismo.  
   * Tasas de aprobaci√≥n y rechazo por circunscripci√≥n y categor√≠a.

## Cambios t√©cnicos necesarios

1. **API**: a√±adir los endpoints:
   * `POST¬†/api/reports/generate` (generar un reporte).  
   * `GET¬†/api/reports/{id}/download` (descargar archivo).  
   * `GET¬†/api/reports/history` (listar reportes generados).  
   * `GET¬†/api/reports/templates` (listar plantillas).  

2. **Persistencia**: crear la tabla `generated_reports` con campos: ID, usuario que gener√≥ el reporte, filtros aplicados (JSON), tipo de reporte, formato, ruta del archivo, tama√±o del archivo y fecha de creaci√≥nhttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/SISTEMA_REPORTES_PROPUESTO.md#L179-L196.

3. **Servicios de generaci√≥n**: en el backend (o en el microservicio), implementar en `/src/lib/reports` servicios que:

   * Ejecuten consultas SQL reales sobre la base `mpd_concursos` para obtener datos de inscripciones, documentos, usuarios y auditor√≠a.  Evitar estimaciones como `Math.floor(totalEligible *¬†0.25)` y utilizar datos actualizadoshttps://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/dashboard/infrastructure/controller/UserDashboardController.java#L136-L157.  
   * Integren la informaci√≥n del archivo CSV para enriquecer los reportes con localidades, circunscripci√≥n y pertenencia a organismo.  
   * Generen los archivos en los formatos solicitados (PDF, Excel, CSV o JSON) utilizando bibliotecas como **jsPDF** para PDF y **xlsx** para Excel/CSV.

4. **Seguridad y auditor√≠a**: proteger los endpoints de generaci√≥n y descarga mediante autenticaci√≥n de administrador.  Registrar todas las acciones (qui√©n gener√≥, descarg√≥, modific√≥ o elimin√≥ un reporte) y conservar el historial en la nueva tabla.  Esto complementa el sistema de trazabilidad existentehttps://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/auth/infrastructure/controller/UserStatusController.java#L38-L95.

5. **Integraci√≥n en el frontend**: 
   * Incorporar el bot√≥n de exportaci√≥n en la vista de postulaciones (fase¬†1) y un men√∫ completo de reportes y auditor√≠a en la barra lateral (fase¬†2).  
   * Implementar p√°ginas de generaci√≥n de reportes y de historial, reutilizando los componentes de filtrado y tablas existentes.  
   * A√±adir notificaciones para avisar cuando un reporte est√° listo y permitir descargas recurrentes o programadas.

## Valor a√±adido y funcionalidades avanzadas

Para que la nueva secci√≥n sea una **herramienta estrat√©gica** y no solo un exportador, se proponen las siguientes mejoras:

1. **Paneles interactivos y filtros avanzados**: adem√°s del formato PDF/Excel, ofrecer vistas interactivas (gr√°ficos, tablas din√°micas) que permitan explorar los datos por centro de vida, circunscripci√≥n o categor√≠a MPDyP/SCJ/MPF.  Esto aprovecha la l√≥gica de filtrado existentehttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/PLAN_ACCION_ESTRUCTURADO.md#L183-L196 y ayuda a detectar tendencias antes de exportar.

2. **Resumen ejecutivo automatizado**: utilizar el m√≥dulo de IA existente en el microservicio para generar un resumen textual de hallazgos y tendencias a partir de los datos de cada reporte.  As√≠, el resumen ejecutivo no solo mostrar√° cifras, sino tambi√©n insights sobre √°reas con mayor o menor participaci√≥n, cuellos de botella en la validaci√≥n, etc.

3. **Indicadores de calidad y alertas**: incluir m√©tricas como tiempo medio de validaci√≥n, porcentaje de documentaci√≥n observada por tipo, tasa de correcci√≥n en primera revisi√≥n y fechas l√≠mite pr√≥ximas.  Configurar alertas cuando ciertos umbrales se incumplan, enlazando directamente a las inscripciones o documentos involucrados.

4. **Mapas y visualizaciones demogr√°ficas**: generar mapas o gr√°ficos que muestren la distribuci√≥n geogr√°fica de los postulantes (por localidad y circunscripci√≥n) y las tasas de aprobaci√≥n/rechazo.  Esto podr√≠a identificar regiones con poca presencia o con altos √≠ndices de rechazo.

5. **Historial de reportes y control de versiones**: mostrar en la secci√≥n de reportes la lista de reportes generados, con metadatos (tipo, fecha, creador, tama√±o) y n√∫mero de descargas.  Permitir descargar versiones antiguas y comparar reportes.

6. **Programaci√≥n y notificaciones**: permitir programar reportes recurrentes (por ejemplo, un reporte semanal de progreso de validaci√≥n) y enviar notificaciones (correo o in‚Äëapp) cuando est√©n listos para descargar.

7. **Firma digital y verificaci√≥n de integridad**: a√±adir firmas digitales o c√≥digos QR a los reportes PDF para validar su autenticidad y detectar modificaciones.  Esto a√±ade valor legal y confianza en la documentaci√≥n oficialhttps://github.com/Evincere/dashboard-monitor/blob/fd78fa57847fcb66ecd2d96bf51d08202a054c67/AUDITORIA_TECNICA/SISTEMA_REPORTES_PROPUESTO.md#L250-L280.

8. **Auditor√≠a completa de uso**: registrar qui√©n genera cada reporte, qu√© filtros utiliza y cu√°ndo lo descarga.  Estas acciones se guardar√°n en `generated_reports` y complementar√°n el subsistema de auditor√≠a existentehttps://github.com/Evincere/mpd_concursos/blob/HEAD/concurso-backend/src/main/java/ar/gov/mpd/concursobackend/auth/infrastructure/controller/UserStatusController.java#L38-L95.

## Conclusi√≥n

La integraci√≥n de una **secci√≥n de reportes administrativos** en el microservicio `dashboard‚Äëmonitor` transformar√° la plataforma en una herramienta integral de gesti√≥n y transparencia.  El backend oficial `mpd_concursos` ya expone la mayor√≠a de los datos necesarios (concursos, inscripciones, documentos, usuarios, validaciones y auditor√≠a), y el CSV proporciona informaci√≥n adicional sobre circunscripci√≥n, localidad y pertenencia institucional que enriquecer√° los reportes.  La propuesta se estructura en dos fases (exportaci√≥n r√°pida y m√≥dulo completo de reportes), define los endpoints y tablas necesarias, y sugiere funcionalidades de valor agregado para convertir los reportes en instrumentos de an√°lisis, control y toma de decisiones.  Con la correcta implementaci√≥n, el MPD dispondr√° de documentaci√≥n oficial actualizada y trazable que cumpla con los requerimientos administrativos y mejore la transparencia de sus procesos.
