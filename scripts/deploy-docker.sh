#!/bin/bash

echo "üê≥ Desplegando Dashboard Monitor con Docker..."

# Verificar que Docker est√© funcionando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker no est√° funcionando"
    exit 1
fi

# Verificar memoria disponible
AVAILABLE_MEMORY=$(free -m | awk 'NR==2{printf "%.0f", $7}')
echo "üìä Memoria disponible: ${AVAILABLE_MEMORY}MB"

if [ $AVAILABLE_MEMORY -lt 1500 ]; then
    echo "‚ö†Ô∏è  Memoria disponible baja para build Docker. Recomendado: >1500MB"
    echo "üí° Considera cerrar otras aplicaciones temporalmente"
    read -p "¬øContinuar de todos modos? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Verificar que la red externa existe
if ! docker network ls | grep -q "mpd_concursos_mpd-concursos-network"; then
    echo "‚ùå La red mpd_concursos_mpd-concursos-network no existe"
    echo "üí° Aseg√∫rate de que el sistema mpd_concursos est√© funcionando"
    exit 1
fi

# Crear volumen si no existe
if ! docker volume ls | grep -q "dashboard-monitor_vector_store"; then
    echo "üì¶ Creando volumen para almacenamiento vectorial..."
    docker volume create dashboard-monitor_vector_store
fi

# Detener contenedor existente si est√° funcionando
if docker ps | grep -q "dashboard-monitor"; then
    echo "üõë Deteniendo contenedor existente..."
    docker stop dashboard-monitor
    docker rm dashboard-monitor
fi

# Limpiar im√°genes no utilizadas para liberar espacio
echo "üßπ Limpiando im√°genes no utilizadas..."
docker system prune -f

# Build de la imagen con configuraci√≥n optimizada para memoria limitada
echo "üèóÔ∏è  Construyendo imagen Docker..."
if [ $AVAILABLE_MEMORY -lt 1500 ]; then
    echo "üíæ Usando configuraci√≥n de memoria limitada..."
    docker build -t dashboard-monitor:latest . --memory=1g --memory-swap=2g
else
    docker build -t dashboard-monitor:latest . --no-cache
fi

if [ $? -ne 0 ]; then
    echo "‚ùå Error durante el build de Docker"
    echo "üí° Sugerencias:"
    echo "   - Ejecuta: npm install para sincronizar dependencias"
    echo "   - Verifica que tengas suficiente espacio en disco"
    echo "   - Considera cerrar otras aplicaciones"
    exit 1
fi

# Iniciar el contenedor
echo "üöÄ Iniciando contenedor..."
docker compose up -d

if [ $? -eq 0 ]; then
    echo "‚úÖ Dashboard Monitor desplegado exitosamente"
    echo ""
    echo "üåê Aplicaci√≥n disponible en:"
    echo "   - Local: http://localhost:9002/dashboard-monitor/"
    echo "   - Red: http://149.50.132.23:9002/dashboard-monitor/"
    echo ""
    echo "üîç Verificando estado..."
    sleep 3
    if curl -s http://localhost:9002/dashboard-monitor/api/health > /dev/null; then
        echo "‚úÖ API respondiendo correctamente"
    else
        echo "‚ö†Ô∏è  API no responde a√∫n, puede necesitar unos segundos m√°s"
    fi
    echo ""
    echo "üìä Comandos √∫tiles:"
    echo "   - Ver logs: docker logs -f dashboard-monitor"
    echo "   - Estado: docker ps | grep dashboard-monitor"
    echo "   - Detener: docker compose down"
else
    echo "‚ùå Error al iniciar el contenedor"
    exit 1
fi