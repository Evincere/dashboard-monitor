# WARP.md

This file provides guidance to WARP (warp.dev) when working with the **PRODUCTION environment** of this repository.

## Project Overview

**MPD Concursos - Sistema de Reportes Oficiales** is a **specialized microservice** deployed in production that serves as the administrative dashboard for the Ministry of Public Defense contest management system. This microservice operates as part of a distributed architecture in a **Ubuntu Linux production environment** and specializes in generating official reports, data visualization, and administrative operations.

### Production Microservice Architecture

#### System Components in Production
- **Primary Backend**: Spring Boot application (`localhost:8080` - Container: `mpd-concursos-backend`)
- **Dashboard Microservice** (this project): Next.js 15 (`localhost:9002` - PM2 Process: `dashboard-monitor`)
- **MySQL Database**: Docker container (`localhost:3307` - Container: `mpd-concursos-mysql`)
- **Docker Network**: `mpd_concursos_mpd-concursos-network`
- **Reverse Proxy Path**: `/dashboard-monitor` (configured in nginx)

#### Production Service Status
- **Dashboard**: ✅ Running via PM2 (Process ID: 69832, Uptime: 8h, Memory: 262.7MB)
- **Backend**: ✅ Spring Boot container running (Port: 8080)
- **Database**: ✅ MySQL 8.0 container healthy (Port: 3307)
- **Data**: ✅ Active with 292 users, 2,246 documents processed

#### Current Production Metrics
- **Total Users**: 292
- **Total Documents**: 2,246 
- **Processing Progress**: 80%
- **Documents Approved**: 1,805
- **Documents Pending**: 361
- **Documents Rejected**: 80

### Tech Stack (Production Environment)
- **OS**: Ubuntu Linux
- **Runtime**: Node.js (PM2 managed)
- **Frontend**: Next.js 15 + TypeScript (Standalone build)
- **Database**: MySQL 8.0 (Docker containerized)
- **Process Management**: PM2 with ecosystem configuration
- **Containerization**: Docker with volume persistence
- **Reverse Proxy**: Nginx with `/dashboard-monitor` basePath

## Essential Production Commands

### Production Management Script
```bash
# Use the comprehensive management script for all operations
./manage-dashboard-monitor.sh help          # Show all available commands

# System Status and Health
./manage-dashboard-monitor.sh status        # Complete system status check
./manage-dashboard-monitor.sh health        # Health verification of all endpoints
./manage-dashboard-monitor.sh diagnose      # Diagnose common issues

# Service Management  
./manage-dashboard-monitor.sh start         # Start the application
./manage-dashboard-monitor.sh stop          # Stop the application
./manage-dashboard-monitor.sh restart       # Restart the application
./manage-dashboard-monitor.sh reload        # Full reload (git pull + build + restart)
```

### PM2 Production Management
```bash
# Direct PM2 commands
pm2 status dashboard-monitor               # Check application status
pm2 logs dashboard-monitor                 # View real-time logs
pm2 logs dashboard-monitor --err           # View error logs only
pm2 restart dashboard-monitor              # Restart application
pm2 stop dashboard-monitor                 # Stop application
pm2 start ecosystem.config.js              # Start with configuration
pm2 monit                                  # Real-time monitoring interface
```

### Build and Deployment
```bash
# Clean production build
./manage-dashboard-monitor.sh build-clean   # Complete clean build
./manage-dashboard-monitor.sh fix-chunks    # Fix ChunkLoadError issues

# Manual build commands
npm run build                              # Quick build
rm -rf .next && npm run build              # Clean build (manual)

# Deployment pipeline
git pull origin main                       # Update code
npm run build                             # Build standalone
pm2 restart dashboard-monitor             # Deploy
```

### Monitoring and Logs
```bash
# Application logs
tail -f /home/semper/dashboard-monitor/logs/combined.log    # All logs
tail -f /home/semper/dashboard-monitor/logs/error.log      # Error logs only
tail -f /home/semper/dashboard-monitor/logs/out.log        # Output logs

# System monitoring
pm2 monit                                  # PM2 real-time monitor
htop                                       # System resources
docker stats                              # Container resource usage

# Log analysis
./manage-dashboard-monitor.sh logs         # Recent application logs  
pm2 logs dashboard-monitor --lines 100     # Last 100 log lines
```

### Docker and Infrastructure
```bash
# Container management
docker ps                                  # List running containers
docker logs mpd-concursos-backend          # Backend logs
docker logs mpd-concursos-mysql            # Database logs

# Network and volumes
docker network ls | grep mpd               # List MPD networks
docker volume ls | grep mpd               # List MPD volumes
docker exec -it mpd-concursos-mysql mysql -u root -p    # MySQL shell

# Service connectivity tests
curl http://localhost:8080/api/health      # Backend health check
curl http://localhost:9002/dashboard-monitor/    # Dashboard health check
```

## Production Architecture Details

### File System Structure
```
/home/semper/dashboard-monitor/
├── .next/                          # Built application (PM2 serves .next/standalone/server.js)
├── logs/                          # PM2 logs (combined.log, error.log, out.log)  
├── docker-documents -> /var/lib/docker/volumes/.../documents  # Symlink to document storage
├── vector_store/                  # AI embeddings storage
├── ecosystem.config.js            # PM2 production configuration
├── manage-dashboard-monitor.sh    # Production management script
├── .env                          # Production environment variables
└── src/                          # Source code
```

### Environment Configuration
Production environment variables (`.env`):
```bash
DB_HOST=localhost                  # MySQL container accessible via localhost
DB_PORT=3307                      # MySQL mapped port
DB_USER=root
DB_PASSWORD=root1234
DB_DATABASE=mpd_concursos
JWT_SECRET=dashboard-monitor-secret-key-2025
```

### PM2 Production Configuration
```javascript
// ecosystem.config.js
{
  name: 'dashboard-monitor',
  script: 'node',
  args: '.next/standalone/server.js',     // Next.js standalone server
  cwd: '/home/semper/dashboard-monitor',
  env: {
    NODE_ENV: 'production',
    PORT: 9002,
    HOSTNAME: '0.0.0.0'
  },
  max_memory_restart: '1G',               // Restart if memory > 1GB
  node_args: '--max-old-space-size=512'   // Node.js memory limit
}
```

### Docker Network Architecture
- **Network**: `mpd_concursos_mpd-concursos-network`
- **Backend Container**: `mpd-concursos-backend` (Spring Boot on port 8080)
- **Database Container**: `mpd-concursos-mysql` (MySQL 8.0 on port 3307)
- **Dashboard Service**: Native PM2 process (connects to Docker network via localhost)

### Data Persistence
```bash
# Docker volumes for data persistence
mpd_concursos_mysql_data_prod      # Database data
mpd_concursos_storage_data_prod    # Document files
mpd_concursos_backup_data_prod     # Backup storage

# Local directories
/home/semper/dashboard-monitor/logs/       # Application logs
/home/semper/dashboard-monitor/vector_store/   # AI embeddings
```

## Production Development Patterns

### Service Integration Pattern
```typescript
// Production backend client configuration
const backendClient = new BackendClient({
  apiUrl: 'http://localhost:8080/api',    // Spring Boot backend
  jwtSecret: process.env.JWT_SECRET,      // Shared secret
  enabled: true                           // Always enabled in production
});

// Database connection (direct MySQL access)
const connection = await getDatabaseConnection({
  host: 'localhost',     // Docker container via port mapping
  port: 3307,           // Mapped MySQL port
  database: 'mpd_concursos'
});
```

### Production Deployment Pattern
```bash
# Standard deployment workflow
git pull origin main                      # Update code
./manage-dashboard-monitor.sh build-clean # Clean build
./manage-dashboard-monitor.sh restart     # Deploy
./manage-dashboard-monitor.sh health      # Verify deployment
```

### Error Handling and Recovery
```bash
# Common production issues and solutions

# 1. ChunkLoadError (asset loading issues)
./manage-dashboard-monitor.sh fix-chunks

# 2. Memory issues
pm2 restart dashboard-monitor              # PM2 auto-restarts at 1GB limit

# 3. Database connectivity 
docker restart mpd-concursos-mysql         # Restart MySQL container

# 4. Backend integration issues
docker restart mpd-concursos-backend       # Restart Spring Boot backend

# 5. Complete system refresh
./manage-dashboard-monitor.sh reload       # Full system reload
```

## Production Monitoring

### Health Check Endpoints
```bash
# Application health checks
curl http://localhost:9002/dashboard-monitor/                           # Dashboard home
curl http://localhost:9002/dashboard-monitor/api/reports/dashboard/metrics  # Dashboard metrics
curl http://localhost:8080/api/health                                   # Backend health
```

### Performance Monitoring
- **PM2 Monitoring**: `pm2 monit` - Real-time process monitoring
- **System Resources**: Dashboard using ~262MB RAM, CPU optimal
- **Memory Management**: Auto-restart at 1GB limit prevents memory leaks
- **Log Rotation**: PM2 handles log rotation automatically

### Production Metrics Available
- **User Management**: 292 active users
- **Document Processing**: 2,246 documents with 80% completion rate
- **System Performance**: Average processing time of 26 seconds
- **Daily Analytics**: Document approval/rejection trends
- **Real-time Status**: Live dashboard with processing statistics

## Troubleshooting Guide

### Common Production Issues
```bash
# 1. Service not responding
./manage-dashboard-monitor.sh diagnose     # Automated diagnosis
pm2 logs dashboard-monitor --err           # Check error logs

# 2. High memory usage
pm2 restart dashboard-monitor              # PM2 handles automatically
htop                                       # Monitor system resources

# 3. Database connectivity issues  
docker ps | grep mysql                    # Verify MySQL container
mysql -h localhost -P 3307 -u root -p     # Test direct connection

# 4. Backend integration failures
curl http://localhost:8080/api/health      # Test backend connectivity
docker logs mpd-concursos-backend         # Check backend logs
```

### Production Best Practices
- **Zero Downtime Deployments**: Use `pm2 reload` instead of `restart` for zero downtime
- **Log Management**: Logs automatically rotate, monitor `/home/semper/dashboard-monitor/logs/`
- **Resource Monitoring**: PM2 auto-restarts prevent memory leaks
- **Backup Strategy**: Database and document volumes are persistent across container restarts
- **Health Monitoring**: Use the comprehensive management script for routine checks

### Emergency Recovery
```bash
# Complete system recovery procedure
docker restart mpd-concursos-mysql mpd-concursos-backend
./manage-dashboard-monitor.sh stop
./manage-dashboard-monitor.sh build-clean
./manage-dashboard-monitor.sh start
./manage-dashboard-monitor.sh health
```

## Production URLs and Access

### Public Access Points
- **Dashboard Home**: `https://vps-4778464-x.dattaweb.com/dashboard-monitor/`
- **Backup Management**: `https://vps-4778464-x.dattaweb.com/dashboard-monitor/backups`
- **Reports Section**: `https://vps-4778464-x.dattaweb.com/dashboard-monitor/reportes`

### Internal Service Endpoints
- **Dashboard API**: `http://localhost:9002/dashboard-monitor/api/`
- **Spring Boot Backend**: `http://localhost:8080/api/`
- **MySQL Database**: `localhost:3307` (mpd_concursos database)

This production environment represents a robust, containerized microservice architecture with proper monitoring, logging, and automated recovery mechanisms, serving the critical administrative dashboard for the MPD contest management system.
