import { apiUrl } from "@/lib/utils";
'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle,
  DialogTrigger 
} from '@/components/ui/dialog';
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { 
  Download, 
  Trash2, 
  RefreshCw, 
  Plus, 
  Database, 
  FolderOpen,
  CheckCircle,
  XCircle,
  Clock,
  AlertTriangle
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface BackupInfo {
  id: string;
  name: string;
  description?: string;
  date: string;
  size: string;
  sizeBytes: number;
  integrity: 'verified' | 'pending' | 'failed';
  type: 'full' | 'incremental';
  includesDocuments: boolean;
  path: string;
}

interface CreateBackupForm {
  name: string;
  description: string;
  includeDocuments: boolean;
}

export default function BackupsPage() {
  const [backups, setBackups] = useState<BackupInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [creating, setCreating] = useState(false);
  const [restoring, setRestoring] = useState<string | null>(null);
  const [deleting, setDeleting] = useState<string | null>(null);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [createForm, setCreateForm] = useState<CreateBackupForm>({
    name: '',
    description: '',
    includeDocuments: true,
  });
  const { toast } = useToast();

  useEffect(() => {
    fetchBackups();
  }, []);

  const fetchBackups = async () => {
    try {
      setLoading(true);
      const response = await fetch(apiUrl('backups');
      const result = await response.json();

      if (result.success) {
        setBackups(result.data);
      } else {
        toast({
          title: 'Error',
          description: 'Error al cargar los backups',
          variant: 'destructive',
          duration: 5000,
        });
      }
    } catch (error) {
      console.error('Error fetching backups:', error);
      toast({
        title: 'Error',
        description: 'Error al cargar los backups',
        variant: 'destructive',
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  };

  const createBackup = async () => {
    if (!createForm.name.trim()) {
      toast({
        title: 'Error',
        description: 'El nombre del backup es requerido',
        variant: 'destructive',
        duration: 5000,
      });
      return;
    }

    try {
      setCreating(true);
      const response = await fetch(apiUrl('backups', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(createForm),
      });

      const result = await response.json();

      if (result.success) {
        toast({
          title: 'Éxito',
          description: 'Backup creado exitosamente',
          duration: 5000,
        });
        setCreateDialogOpen(false);
        setCreateForm({ name: '', description: '', includeDocuments: true });
        fetchBackups();
      } else {
        toast({
          title: 'Error',
          description: result.error || 'Error al crear el backup',
          variant: 'destructive',
          duration: 5000,
        });
      }
    } catch (error) {
      console.error('Error creating backup:', error);
      toast({
        title: 'Error',
        description: 'Error al crear el backup',
        variant: 'destructive',
        duration: 5000,
      });
    } finally {
      setCreating(false);
    }
  };

  const restoreBackup = async (backupId: string) => {
    try {
      setRestoring(backupId);
      const response = await fetch(apiUrl('backups', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          backupId,
          confirmRestore: true,
        }),
      });

      const result = await response.json();

      if (result.success) {
        toast({
          title: 'Éxito',
          description: 'Backup restaurado exitosamente',
          duration: 5000,
        });
      } else {
        toast({
          title: 'Error',
          description: result.error || 'Error al restaurar el backup',
          variant: 'destructive',
          duration: 5000,
        });
      }
    } catch (error) {
      console.error('Error restoring backup:', error);
      toast({
        title: 'Error',
        description: 'Error al restaurar el backup',
        variant: 'destructive',
        duration: 5000,
      });
    } finally {
      setRestoring(null);
    }
  };

  const deleteBackup = async (backupId: string) => {
    try {
      setDeleting(backupId);
      const response = await fetch(`/api/backups?id=${backupId}`, {
        method: 'DELETE',
      });

      const result = await response.json();

      if (result.success) {
        toast({
          title: 'Éxito',
          description: 'Backup eliminado exitosamente',
          duration: 5000,
        });
        fetchBackups();
      } else {
        toast({
          title: 'Error',
          description: result.error || 'Error al eliminar el backup',
          variant: 'destructive',
          duration: 5000,
        });
      }
    } catch (error) {
      console.error('Error deleting backup:', error);
      toast({
        title: 'Error',
        description: 'Error al eliminar el backup',
        variant: 'destructive',
        duration: 5000,
      });
    } finally {
      setDeleting(null);
    }
  };

  const getIntegrityIcon = (integrity: string) => {
    switch (integrity) {
      case 'verified':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'failed':
        return <XCircle className="h-4 w-4 text-red-500" />;
      case 'pending':
        return <Clock className="h-4 w-4 text-yellow-500" />;
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-500" />;
    }
  };

  const getIntegrityBadge = (integrity: string) => {
    switch (integrity) {
      case 'verified':
        return <Badge variant="default" className="bg-green-100 text-green-800">Verificado</Badge>;
      case 'failed':
        return <Badge variant="destructive">Fallido</Badge>;
      case 'pending':
        return <Badge variant="secondary">Pendiente</Badge>;
      default:
        return <Badge variant="outline">Desconocido</Badge>;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Gestión de Backups</h1>
          <p className="text-muted-foreground">
            Administra backups de base de datos y documentos para el sistema MPD Concursos
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={fetchBackups}
            disabled={loading}
          >
            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            Actualizar
          </Button>
          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Crear Backup
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Crear Nuevo Backup</DialogTitle>
                <DialogDescription>
                  Crea un nuevo backup de la base de datos y opcionalmente incluye documentos.
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="name">Nombre del Backup</Label>
                  <Input
                    id="name"
                    value={createForm.name}
                    onChange={(e) => setCreateForm({ ...createForm, name: e.target.value })}
                    placeholder="Ingresa el nombre del backup"
                  />
                </div>
                <div>
                  <Label htmlFor="description">Descripción (Opcional)</Label>
                  <Textarea
                    id="description"
                    value={createForm.description}
                    onChange={(e) => setCreateForm({ ...createForm, description: e.target.value })}
                    placeholder="Ingresa la descripción del backup"
                    rows={3}
                  />
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="includeDocuments"
                    checked={createForm.includeDocuments}
                    onCheckedChange={(checked) => 
                      setCreateForm({ ...createForm, includeDocuments: checked as boolean })
                    }
                  />
                  <Label htmlFor="includeDocuments">Incluir documentos</Label>
                </div>
              </div>
              <DialogFooter>
                <Button
                  variant="outline"
                  onClick={() => setCreateDialogOpen(false)}
                  disabled={creating}
                >
                  Cancelar
                </Button>
                <Button onClick={createBackup} disabled={creating}>
                  {creating ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      Creando...
                    </>
                  ) : (
                    <>
                      <Database className="h-4 w-4 mr-2" />
                      Crear Backup
                    </>
                  )}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Backup Statistics */}
      <div className="grid gap-4 md:grid-cols-3">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Backups</CardTitle>
            <Database className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{backups.length}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Tamaño Total</CardTitle>
            <FolderOpen className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {backups.reduce((total, backup) => total + backup.sizeBytes, 0) > 0
                ? (backups.reduce((total, backup) => total + backup.sizeBytes, 0) / (1024 * 1024 * 1024)).toFixed(2) + ' GB'
                : '0 GB'
              }
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Backups Verificados</CardTitle>
            <CheckCircle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {backups.filter(b => b.integrity === 'verified').length}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Backups Table */}
      <Card>
        <CardHeader>
          <CardTitle>Historial de Backups</CardTitle>
          <CardDescription>
            Ver y administrar todos los backups del sistema almacenados en mpd_concursos_backup_data_prod
          </CardDescription>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <RefreshCw className="h-6 w-6 animate-spin mr-2" />
              Cargando backups...
            </div>
          ) : backups.length === 0 ? (
            <div className="text-center py-8">
              <Database className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No se encontraron backups</h3>
              <p className="text-muted-foreground mb-4">
                Crea tu primer backup para comenzar
              </p>
              <Button onClick={() => setCreateDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Crear Backup
              </Button>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Nombre</TableHead>
                  <TableHead>Fecha</TableHead>
                  <TableHead>Tamaño</TableHead>
                  <TableHead>Tipo</TableHead>
                  <TableHead>Integridad</TableHead>
                  <TableHead>Incluye Docs</TableHead>
                  <TableHead>Acciones</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {backups.map((backup) => (
                  <TableRow key={backup.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{backup.name}</div>
                        {backup.description && (
                          <div className="text-sm text-muted-foreground">
                            {backup.description}
                          </div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      {new Date(backup.date).toLocaleString('es-ES')}
                    </TableCell>
                    <TableCell>{backup.size}</TableCell>
                    <TableCell>
                      <Badge variant="outline">{backup.type === 'full' ? 'Completo' : 'Incremental'}</Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        {getIntegrityIcon(backup.integrity)}
                        {getIntegrityBadge(backup.integrity)}
                      </div>
                    </TableCell>
                    <TableCell>
                      {backup.includesDocuments ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <XCircle className="h-4 w-4 text-gray-400" />
                      )}
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="outline"
                              size="sm"
                              disabled={backup.integrity !== 'verified' || restoring === backup.id}
                            >
                              {restoring === backup.id ? (
                                <RefreshCw className="h-4 w-4 animate-spin" />
                              ) : (
                                <Download className="h-4 w-4" />
                              )}
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Restaurar Backup</AlertDialogTitle>
                              <AlertDialogDescription>
                                ¿Estás seguro de que quieres restaurar este backup? Esta acción reemplazará
                                la base de datos actual con los datos del backup y no se puede deshacer.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancelar</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => restoreBackup(backup.id)}
                                className="bg-red-600 hover:bg-red-700"
                              >
                                Restaurar Backup
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>

                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="outline"
                              size="sm"
                              disabled={deleting === backup.id}
                            >
                              {deleting === backup.id ? (
                                <RefreshCw className="h-4 w-4 animate-spin" />
                              ) : (
                                <Trash2 className="h-4 w-4" />
                              )}
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Eliminar Backup</AlertDialogTitle>
                              <AlertDialogDescription>
                                ¿Estás seguro de que quieres eliminar este backup? Esta acción no se puede deshacer.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancelar</AlertDialogCancel>
                              <AlertDialogAction
                                onClick={() => deleteBackup(backup.id)}
                                className="bg-red-600 hover:bg-red-700"
                              >
                                Eliminar
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      {/* Important Notice */}
      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          <strong>Importante:</strong> Las operaciones de backup pueden tomar varios minutos en completarse dependiendo del tamaño de la base de datos. 
          Los backups de documentos se almacenan por separado y requieren espacio de almacenamiento adicional. Siempre verifica la integridad del backup 
          antes de confiar en ellos para propósitos de recuperación.
        </AlertDescription>
      </Alert>
    </div>
  );
}
