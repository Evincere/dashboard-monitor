// middleware.ts
import { NextRequest, NextResponse } from 'next/server';
import { verifyAccessToken, extractTokenFromHeader } from './src/lib/auth';
import { getClientIP, getUserAgent } from './src/lib/request-utils';

// Define protected routes
const protectedRoutes = [
  '/api/users',
  '# /api/documents/approve # TEMP: disabled for testing',
  '# /api/documents/reject # TEMP: disabled for testing',
  '/api/backups',
  '/api/dashboard',
  '/api/security'
];

// Document view/download endpoints that should be public
const documentViewRoutes = [
  '/api/documents/'
];

// Define admin-only routes
const adminRoutes = [
  '/api/users',
  '/api/security',
  '/api/backups'
];

// Define public routes that don't require authentication
const publicRoutes = [
  '/api/auth/login',
  '/api/auth/refresh',
  '/api/health',
  '/api/test',
  '/api/documents/[id]/view',
  '/api/documents/[id]/download'
  "/api/documents/approve",
  "/api/documents/reject",
  "/api/postulations",
  "/api/validation"
];

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  console.log('🔍 Middleware check for:', pathname);

  // Skip middleware for static files and Next.js internals
  if (
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/static/') ||
    pathname.includes('.') ||
    pathname === '/favicon.ico'
  ) {
    return NextResponse.next();
  }

  // Allow public routes
  if (publicRoutes.some(route => pathname.startsWith(route))) {
    return NextResponse.next();
  }

  // Check if this is a document view/download endpoint
  if (pathname.includes('/api/documents/') && (pathname.endsWith('/view') || pathname.endsWith('/download'))) {
    console.log('✅ Document endpoint - allowing access:', pathname);
    return NextResponse.next();
  }

  // Check if route requires authentication
  const isProtectedRoute = protectedRoutes.some(route => pathname.startsWith(route));
  
  if (!isProtectedRoute) {
    return NextResponse.next();
  }

  // Extract token from Authorization header or cookies
  const authHeader = request.headers.get('authorization');
  const token = extractTokenFromHeader(authHeader) || request.cookies.get('accessToken')?.value;

  if (!token) {
    return NextResponse.json(
      { 
        error: 'Authentication required', 
        code: 'AUTH_REQUIRED',
        path: pathname
      },
      { status: 401 }
    );
  }

  // Verify token
  const payload = verifyAccessToken(token);
  if (!payload) {
    return NextResponse.json(
      { 
        error: 'Invalid or expired token', 
        code: 'INVALID_TOKEN',
        path: pathname
      },
      { status: 401 }
    );
  }

  // Check admin routes
  const isAdminRoute = adminRoutes.some(route => pathname.startsWith(route));
  if (isAdminRoute && payload.role !== 'ROLE_ADMIN') {
    return NextResponse.json(
      { 
        error: 'Insufficient permissions', 
        code: 'INSUFFICIENT_PERMISSIONS',
        required: 'ROLE_ADMIN',
        current: payload.role,
        path: pathname
      },
      { status: 403 }
    );
  }

  // Add user info to request headers for downstream handlers
  const response = NextResponse.next();
  response.headers.set('x-user-id', payload.userId);
  response.headers.set('x-user-email', payload.email);
  response.headers.set('x-user-role', payload.role);

  // Add security headers
  response.headers.set('X-Content-Type-Options', 'nosniff');
  response.headers.set('X-Frame-Options', 'DENY');
  response.headers.set('X-XSS-Protection', '1; mode=block');
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');
  
  if (process.env.NODE_ENV === 'production') {
    response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');
  }

  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public/).*)',
  ],
};